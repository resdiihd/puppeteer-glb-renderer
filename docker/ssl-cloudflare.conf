# Enhanced IP Whitelist with Cloudflare Support
# Company IPs: 116.105.225.199, 113.176.195.214
# Cloudflare IPs: Allow Cloudflare to connect to server

upstream glb_backend {
    server localhost:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Define Cloudflare IP ranges (updated list)
geo $cloudflare_ip {
    default 0;
    # Cloudflare IPv4 ranges
    173.245.48.0/20 1;
    103.21.244.0/22 1;
    103.22.200.0/22 1;
    103.31.4.0/22 1;
    141.101.64.0/18 1;
    108.162.192.0/18 1;
    190.93.240.0/20 1;
    188.114.96.0/20 1;
    197.234.240.0/22 1;
    198.41.128.0/17 1;
    162.158.0.0/15 1;
    104.16.0.0/13 1;
    104.24.0.0/14 1;
    172.64.0.0/13 1;
    131.0.72.0/22 1;
}

# Define allowed end-user IPs (for application access control)
geo $allowed_user_ip {
    default 0;
    116.105.225.199 1;
    113.176.195.214 1;
    127.0.0.1 1;  # localhost
    ::1 1;        # IPv6 localhost
}

# Define allowed server access (Cloudflare + localhost)
geo $allowed_server_ip {
    default 0;
    # Include Cloudflare ranges
    173.245.48.0/20 1;
    103.21.244.0/22 1;
    103.22.200.0/22 1;
    103.31.4.0/22 1;
    141.101.64.0/18 1;
    108.162.192.0/18 1;
    190.93.240.0/20 1;
    188.114.96.0/20 1;
    197.234.240.0/22 1;
    198.41.128.0/17 1;
    162.158.0.0/15 1;
    104.16.0.0/13 1;
    104.24.0.0/14 1;
    172.64.0.0/13 1;
    131.0.72.0/22 1;
    # Include localhost
    127.0.0.1 1;
    ::1 1;
}

# HTTP Server - Redirect to HTTPS
server {
    listen 80;
    server_name 3d.itsoa.io.vn;
    
    # Allow ACME challenges (no IP restriction)
    location /.well-known/acme-challenge/ {
        root /acme;
        try_files $uri =404;
    }
    
    # Health check endpoint (allow from server IPs - Cloudflare + localhost)
    location /health {
        # Allow server access (Cloudflare + localhost)
        if ($allowed_server_ip = 0) {
            return 403 "Server access denied";
        }
        
        proxy_pass http://glb_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
    }
    
    # All other HTTP requests - redirect to HTTPS
    location / {
        # Allow server access for redirects
        if ($allowed_server_ip = 0) {
            return 403 '{"error":"Access denied","message":"Server access not allowed","ip":"$remote_addr"}';
        }
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS Server
server {
    listen 443 ssl http2;
    server_name 3d.itsoa.io.vn;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/3d.itsoa.io.vn.crt;
    ssl_certificate_key /etc/ssl/private/3d.itsoa.io.vn.key;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # Security Headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    
    # Allow server access (Cloudflare can connect to server)
    if ($allowed_server_ip = 0) {
        return 403 '{"error":"Server access denied","message":"Your connection is not authorized","ip":"$remote_addr","timestamp":"$time_iso8601"}';
    }
    
    # Health check endpoint (accessible via Cloudflare)
    location /health {
        proxy_pass http://glb_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
        
        # Add CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;
    }
    
    # Static files and uploads
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|glb|gltf)$ {
        proxy_pass http://glb_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
        
        # Cache static files
        expires 1h;
        add_header Cache-Control "public, immutable" always;
    }
    
    # Main application endpoints
    location / {
        # Pass all requests to Node.js app
        # User IP filtering will be handled by the Node.js middleware
        proxy_pass http://glb_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
        
        # Timeouts for long-running rendering operations
        proxy_connect_timeout 60s;
        proxy_send_timeout 900s;
        proxy_read_timeout 900s;
        proxy_buffering off;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Add CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            add_header Access-Control-Max-Age 3600 always;
            add_header Content-Type "text/plain; charset=utf-8" always;
            add_header Content-Length 0 always;
            return 204;
        }
    }
    
    # Custom error pages
    error_page 403 /403.html;
    location = /403.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# Fallback server for unmatched domains
server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;
    
    # Self-signed certificate for default server
    ssl_certificate /etc/ssl/certs/3d.itsoa.io.vn.crt;
    ssl_certificate_key /etc/ssl/private/3d.itsoa.io.vn.key;
    
    return 444; # Close connection without response
}